// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: products.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getProduct = `-- name: GetProduct :one
SELECT id, name, description, price, image_url, created_at, updated_at FROM products WHERE id = $1
`

func (q *Queries) GetProduct(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
WITH product_count AS (
    SELECT COUNT(*) AS total FROM products
)
SELECT p.id, p.name, p.description, p.price, p.image_url, p.created_at, p.updated_at,
       pc.total,
       CEIL(pc.total::float / $1::int) AS total_pages
FROM products p, product_count pc
ORDER BY p.created_at
LIMIT $1
OFFSET $2
`

type GetProductsParams struct {
	Limit  int32
	Offset int32
}

type GetProductsRow struct {
	ID          uuid.UUID
	Name        string
	Description pgtype.Text
	Price       float32
	ImageUrl    pgtype.Text
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	Total       int64
	TotalPages  float64
}

func (q *Queries) GetProducts(ctx context.Context, arg GetProductsParams) ([]GetProductsRow, error) {
	rows, err := q.db.Query(ctx, getProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductsRow
	for rows.Next() {
		var i GetProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Total,
			&i.TotalPages,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertProduct = `-- name: InsertProduct :one
INSERT INTO
    products (
        name,
        description,
        price,
        image_url
    )
VALUES ($1, $2, $3, $4) RETURNING id
`

type InsertProductParams struct {
	Name        string
	Description pgtype.Text
	Price       float32
	ImageUrl    pgtype.Text
}

func (q *Queries) InsertProduct(ctx context.Context, arg InsertProductParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.ImageUrl,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
