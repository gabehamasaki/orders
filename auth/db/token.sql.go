// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: token.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deletedTokenById = `-- name: DeletedTokenById :exec
DELETE FROM user_token WHERE id = $1
`

func (q *Queries) DeletedTokenById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletedTokenById, id)
	return err
}

const deletedTokenByUserId = `-- name: DeletedTokenByUserId :exec
DELETE FROM user_token WHERE user_id = $1
`

func (q *Queries) DeletedTokenByUserId(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletedTokenByUserId, userID)
	return err
}

const findTokenByToken = `-- name: FindTokenByToken :one
SELECT id, user_id, token, created_at, expires_at FROM user_token WHERE token = $1
`

func (q *Queries) FindTokenByToken(ctx context.Context, token string) (UserToken, error) {
	row := q.db.QueryRow(ctx, findTokenByToken, token)
	var i UserToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const findTokenByUserId = `-- name: FindTokenByUserId :one
SELECT id, user_id, token, created_at, expires_at FROM user_token WHERE user_id = $1
`

func (q *Queries) FindTokenByUserId(ctx context.Context, userID uuid.UUID) (UserToken, error) {
	row := q.db.QueryRow(ctx, findTokenByUserId, userID)
	var i UserToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getTokenIsExpiredByUserId = `-- name: GetTokenIsExpiredByUserId :one
SELECT id, user_id, token, created_at, expires_at
FROM user_token
WHERE
    user_id = $1
    AND expires_at < now()
`

func (q *Queries) GetTokenIsExpiredByUserId(ctx context.Context, userID uuid.UUID) (UserToken, error) {
	row := q.db.QueryRow(ctx, getTokenIsExpiredByUserId, userID)
	var i UserToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const insertToken = `-- name: InsertToken :one
INSERT INTO
    user_token (user_id, token, expires_at)
VALUES ($1, $2, $3) RETURNING id
`

type InsertTokenParams struct {
	UserID    uuid.UUID
	Token     string
	ExpiresAt pgtype.Timestamp
}

func (q *Queries) InsertToken(ctx context.Context, arg InsertTokenParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertToken, arg.UserID, arg.Token, arg.ExpiresAt)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
