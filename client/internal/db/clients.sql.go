// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: clients.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteClient = `-- name: DeleteClient :exec
DELETE FROM clients WHERE id = $1
`

func (q *Queries) DeleteClient(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteClient, id)
	return err
}

const findClientById = `-- name: FindClientById :one
SELECT id, name, brand_name, logo_url, created_at, updated_at FROM clients WHERE id = $1
`

func (q *Queries) FindClientById(ctx context.Context, id uuid.UUID) (Client, error) {
	row := q.db.QueryRow(ctx, findClientById, id)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BrandName,
		&i.LogoUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getClients = `-- name: GetClients :many
WITH client_count AS (
    SELECT COUNT(*) AS total FROM clients
)
SELECT c.id, c.name, c.brand_name, c.logo_url,
       cc.total,
       CEIL(cc.total::float / $1::int) AS total_pages
FROM clients c, client_count cc
ORDER BY c.created_at
LIMIT $1
OFFSET $2
`

type GetClientsParams struct {
	Limit  int32
	Offset int32
}

type GetClientsRow struct {
	ID         uuid.UUID
	Name       string
	BrandName  string
	LogoUrl    pgtype.Text
	Total      int64
	TotalPages float64
}

func (q *Queries) GetClients(ctx context.Context, arg GetClientsParams) ([]GetClientsRow, error) {
	rows, err := q.db.Query(ctx, getClients, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClientsRow
	for rows.Next() {
		var i GetClientsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BrandName,
			&i.LogoUrl,
			&i.Total,
			&i.TotalPages,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertClient = `-- name: InsertClient :one
INSERT INTO
    clients (
        "name",
        "brand_name",
        "logo_url"
    )
VALUES ($1, $2, $3) RETURNING "id"
`

type InsertClientParams struct {
	Name      string
	BrandName string
	LogoUrl   pgtype.Text
}

func (q *Queries) InsertClient(ctx context.Context, arg InsertClientParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertClient, arg.Name, arg.BrandName, arg.LogoUrl)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateClient = `-- name: UpdateClient :exec
UPDATE clients
SET
    "name" = $2,
    "brand_name" = $3,
    "logo_url" = $4
WHERE
    id = $1
`

type UpdateClientParams struct {
	ID        uuid.UUID
	Name      string
	BrandName string
	LogoUrl   pgtype.Text
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) error {
	_, err := q.db.Exec(ctx, updateClient,
		arg.ID,
		arg.Name,
		arg.BrandName,
		arg.LogoUrl,
	)
	return err
}
